unit UF_ConsultaTickets;

interface

uses
  System.SysUtils, System.Types, System.UITypes, System.Classes, System.Variants, 
  FMX.Types, FMX.Graphics, FMX.Controls, FMX.Forms, FMX.Dialogs, FMX.StdCtrls,
  UF_ConsultaBase, FMX.Layouts, FMX.ListBox, FMX.Objects,
  FMX.Controls.Presentation, uTicketController, TicketModel,
  Generics.Collections, Loading, uFrameConsultaTickets, uFuncionarioController;

type
  TFrmConsultaTicket = class(TFrmConsultaBase)
    procedure FormCreate(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormShow(Sender: TObject);
  private
    { Private declarations }
    TicketController: TTicketController;
    FuncionarioController: TFuncionarioController;

    procedure ConsultaDados(Sender: TObject);
    procedure MontaTela(Sender: TObject);
    procedure AdicionarColunaListBox;
    procedure AdicionarItemListBox(ticket: TTicketModel);
    procedure EditarTicketOnClick(Sender: TObject);
    procedure ValidarExisteAlgumFuncionario();
    procedure OnExecutarAposValidarExisteAlgumFuncionario(Sender: TObject);
  public
    { Public declarations }
  end;

var
  FrmConsultaTicket: TFrmConsultaTicket;

implementation

uses
  uFrameColunas, Funcoes, UF_CadastroTicket;

{$R *.fmx}

procedure TFrmConsultaTicket.AdicionarColunaListBox;
var
  Frame: TFrameColunas;
  ItemLb: TListBoxItem;
  listaColunas: TObjectList<TColumnsFrame>;
begin
  Itemlb := TListBoxItem.Create(lbRegistros);
  Itemlb.Height := 35;

  listaColunas := TObjectList<TColumnsFrame>.Create;
  with listaColunas do
  begin
    var coluna: TColumnsFrame;
    coluna := TColumnsFrame.Create;
    coluna.Nome := 'Id';
    coluna.tamanhoPorcent := 10;
    Add(coluna);

    coluna := TColumnsFrame.Create;
    coluna.Nome := 'Quantidade';
    coluna.tamanhoPorcent := 20;
    Add(coluna);

    coluna := TColumnsFrame.Create;
    coluna.Nome := 'Situação';
    coluna.tamanhoPorcent := 20;
    Add(coluna);

    coluna := TColumnsFrame.Create;
    coluna.Nome := 'Funcionário';
    coluna.tamanhoPorcent := 30;
    Add(coluna);

    coluna := TColumnsFrame.Create;
    coluna.Nome := 'Ações';
    coluna.tamanhoPorcent := 20;
    Add(coluna);
  end;

  Frame := TFrameColunas.Create(ItemLb, listaColunas);
  ItemLb.AddObject(Frame);
  lbRegistros.AddObject(ItemLb);
end;

procedure TFrmConsultaTicket.AdicionarItemListBox(ticket: TTicketModel);
var
  Frame: TFrameConsultaTickets;
  ItemLb: TListBoxItem;
begin
  Itemlb := TListBoxItem.Create(lbRegistros);
  Itemlb.Height := 35;

  Frame := TFrameConsultaTickets.Create(ItemLb);
  Frame.IdTicket            := Ticket.Id;
  Frame.lblId.Text          := Ticket.Id.ToString;
  Frame.lblQuantidade.Text  := Ticket.Quantidade.ToString;
  Frame.lblFuncionario.Text := Ticket.Funcionario.Nome;
  Frame.lblSituacao.Text := IfThen(ticket.Situacao = 'A', 'Ativo', 'Inativo');
  Frame.rectEditar.OnClick := EditarTicketOnClick;
  ItemLb.AddObject(Frame);
  lbRegistros.AddObject(ItemLb);
end;

procedure TFrmConsultaTicket.ConsultaDados(Sender: TObject);
begin
  TLoading.Show('Consultando tickets...', FrmConsultaTicket);
  TicketController.RecuperarTickets(MontaTela);
end;

procedure TFrmConsultaTicket.EditarTicketOnClick(Sender: TObject);
var
  FrameTicket: TFrameConsultaTickets;
begin
  FrameTicket := TFrameConsultaTickets(TControl(Sender).Parent.Parent);
//  if not Assigned() then

end;

procedure TFrmConsultaTicket.FormClose(Sender: TObject;
  var Action: TCloseAction);
begin
  TicketController.Free;
  FuncionarioController.Free;
  Action := TCloseAction.caFree;
  FrmConsultaTicket := nil;
end;

procedure TFrmConsultaTicket.FormCreate(Sender: TObject);
begin
  inherited;
  TicketController := TTicketController.Create;
  FuncionarioController := TFuncionarioController.Create;
end;

procedure TFrmConsultaTicket.FormShow(Sender: TObject);
begin
  inherited;
  ConsultaDados(Sender);
end;

procedure TFrmConsultaTicket.MontaTela(Sender: TObject);
begin
  TLoading.Hide;
  if Sender is TThread then
  begin
    if Assigned(TThread(Sender).FatalException) then
    begin
      ShowMessage(Exception(TThread(sender).FatalException).Message);
      Exit;
    end;
  end;

  lbRegistros.Items.Clear;
  lbRegistros.beginUpdate;
  try
    AdicionarColunaListBox;
    for var Ticket: TTicketModel in TicketController.listaTickets do
      AdicionarItemListBox(ticket);
  finally
    lbRegistros.EndUpdate;
    TLoading.Hide;
  end;
end;

procedure TFrmConsultaTicket.OnExecutarAposValidarExisteAlgumFuncionario(
  Sender: TObject);
begin
  TLoading.Hide;
  if Sender is TThread then
  begin
    if Assigned(TThread(Sender).FatalException) then
    begin
      ShowMessage(Exception(TThread(sender).FatalException).Message);
      Exit;
    end;
  end;

  if not Assigned(FrmCadastroTicket) then
    FrmCadastroTicket := TFrmCadastroTicket.Create(Self);
  FrmCadastroTicket.Show;
end;

procedure TFrmConsultaTicket.ValidarExisteAlgumFuncionario;
begin
  TLoading.Show('Verificando se existe algum funcionário...', FrmConsultaTicket);
  FuncionarioController.VerificarSeAlgumFuncionarioExiste(OnExecutarAposValidarExisteAlgumFuncionario);
end;

end.
